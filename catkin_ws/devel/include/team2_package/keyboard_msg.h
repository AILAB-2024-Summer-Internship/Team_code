// Generated by gencpp from file team2_package/keyboard_msg.msg
// DO NOT EDIT!


#ifndef TEAM2_PACKAGE_MESSAGE_KEYBOARD_MSG_H
#define TEAM2_PACKAGE_MESSAGE_KEYBOARD_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace team2_package
{
template <class ContainerAllocator>
struct keyboard_msg_
{
  typedef keyboard_msg_<ContainerAllocator> Type;

  keyboard_msg_()
    : fb_speed(0.0)
    , yaw(0.0)
    , gear(0)
    , brake(false)  {
    }
  keyboard_msg_(const ContainerAllocator& _alloc)
    : fb_speed(0.0)
    , yaw(0.0)
    , gear(0)
    , brake(false)  {
  (void)_alloc;
    }



   typedef float _fb_speed_type;
  _fb_speed_type fb_speed;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef int32_t _gear_type;
  _gear_type gear;

   typedef uint8_t _brake_type;
  _brake_type brake;





  typedef boost::shared_ptr< ::team2_package::keyboard_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::team2_package::keyboard_msg_<ContainerAllocator> const> ConstPtr;

}; // struct keyboard_msg_

typedef ::team2_package::keyboard_msg_<std::allocator<void> > keyboard_msg;

typedef boost::shared_ptr< ::team2_package::keyboard_msg > keyboard_msgPtr;
typedef boost::shared_ptr< ::team2_package::keyboard_msg const> keyboard_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::team2_package::keyboard_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::team2_package::keyboard_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::team2_package::keyboard_msg_<ContainerAllocator1> & lhs, const ::team2_package::keyboard_msg_<ContainerAllocator2> & rhs)
{
  return lhs.fb_speed == rhs.fb_speed &&
    lhs.yaw == rhs.yaw &&
    lhs.gear == rhs.gear &&
    lhs.brake == rhs.brake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::team2_package::keyboard_msg_<ContainerAllocator1> & lhs, const ::team2_package::keyboard_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace team2_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::team2_package::keyboard_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::team2_package::keyboard_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::team2_package::keyboard_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::team2_package::keyboard_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team2_package::keyboard_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team2_package::keyboard_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::team2_package::keyboard_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd4b2bffdbfc91ff88466d3ab2a24fe4";
  }

  static const char* value(const ::team2_package::keyboard_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd4b2bffdbfc91ffULL;
  static const uint64_t static_value2 = 0x88466d3ab2a24fe4ULL;
};

template<class ContainerAllocator>
struct DataType< ::team2_package::keyboard_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "team2_package/keyboard_msg";
  }

  static const char* value(const ::team2_package::keyboard_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::team2_package::keyboard_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 fb_speed\n"
"float32 yaw\n"
"int32 gear\n"
"bool brake\n"
;
  }

  static const char* value(const ::team2_package::keyboard_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::team2_package::keyboard_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fb_speed);
      stream.next(m.yaw);
      stream.next(m.gear);
      stream.next(m.brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct keyboard_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::team2_package::keyboard_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::team2_package::keyboard_msg_<ContainerAllocator>& v)
  {
    s << indent << "fb_speed: ";
    Printer<float>::stream(s, indent + "  ", v.fb_speed);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEAM2_PACKAGE_MESSAGE_KEYBOARD_MSG_H
