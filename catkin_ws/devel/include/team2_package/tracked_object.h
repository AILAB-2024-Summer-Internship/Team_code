// Generated by gencpp from file team2_package/tracked_object.msg
// DO NOT EDIT!


#ifndef TEAM2_PACKAGE_MESSAGE_TRACKED_OBJECT_H
#define TEAM2_PACKAGE_MESSAGE_TRACKED_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace team2_package
{
template <class ContainerAllocator>
struct tracked_object_
{
  typedef tracked_object_<ContainerAllocator> Type;

  tracked_object_()
    : center_x(0.0)
    , center_y(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , size_x(0.0)
    , size_y(0.0)  {
    }
  tracked_object_(const ContainerAllocator& _alloc)
    : center_x(0.0)
    , center_y(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , size_x(0.0)
    , size_y(0.0)  {
  (void)_alloc;
    }



   typedef double _center_x_type;
  _center_x_type center_x;

   typedef double _center_y_type;
  _center_y_type center_y;

   typedef double _v_x_type;
  _v_x_type v_x;

   typedef double _v_y_type;
  _v_y_type v_y;

   typedef double _size_x_type;
  _size_x_type size_x;

   typedef double _size_y_type;
  _size_y_type size_y;





  typedef boost::shared_ptr< ::team2_package::tracked_object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::team2_package::tracked_object_<ContainerAllocator> const> ConstPtr;

}; // struct tracked_object_

typedef ::team2_package::tracked_object_<std::allocator<void> > tracked_object;

typedef boost::shared_ptr< ::team2_package::tracked_object > tracked_objectPtr;
typedef boost::shared_ptr< ::team2_package::tracked_object const> tracked_objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::team2_package::tracked_object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::team2_package::tracked_object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::team2_package::tracked_object_<ContainerAllocator1> & lhs, const ::team2_package::tracked_object_<ContainerAllocator2> & rhs)
{
  return lhs.center_x == rhs.center_x &&
    lhs.center_y == rhs.center_y &&
    lhs.v_x == rhs.v_x &&
    lhs.v_y == rhs.v_y &&
    lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::team2_package::tracked_object_<ContainerAllocator1> & lhs, const ::team2_package::tracked_object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace team2_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::team2_package::tracked_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::team2_package::tracked_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::team2_package::tracked_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::team2_package::tracked_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team2_package::tracked_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team2_package::tracked_object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::team2_package::tracked_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee6d8746eebf377eed126cb7859c31c3";
  }

  static const char* value(const ::team2_package::tracked_object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee6d8746eebf377eULL;
  static const uint64_t static_value2 = 0xed126cb7859c31c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::team2_package::tracked_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "team2_package/tracked_object";
  }

  static const char* value(const ::team2_package::tracked_object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::team2_package::tracked_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 center_x\n"
"float64 center_y\n"
"float64 v_x\n"
"float64 v_y\n"
"float64 size_x\n"
"float64 size_y\n"
;
  }

  static const char* value(const ::team2_package::tracked_object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::team2_package::tracked_object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center_x);
      stream.next(m.center_y);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.size_x);
      stream.next(m.size_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tracked_object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::team2_package::tracked_object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::team2_package::tracked_object_<ContainerAllocator>& v)
  {
    s << indent << "center_x: ";
    Printer<double>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<double>::stream(s, indent + "  ", v.center_y);
    s << indent << "v_x: ";
    Printer<double>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<double>::stream(s, indent + "  ", v.v_y);
    s << indent << "size_x: ";
    Printer<double>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<double>::stream(s, indent + "  ", v.size_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEAM2_PACKAGE_MESSAGE_TRACKED_OBJECT_H
