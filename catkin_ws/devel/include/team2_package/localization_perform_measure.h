// Generated by gencpp from file team2_package/localization_perform_measure.msg
// DO NOT EDIT!


#ifndef TEAM2_PACKAGE_MESSAGE_LOCALIZATION_PERFORM_MEASURE_H
#define TEAM2_PACKAGE_MESSAGE_LOCALIZATION_PERFORM_MEASURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Odometry.h>
#include <team2_package/vehicle_state.h>
#include <sensor_msgs/NavSatFix.h>

namespace team2_package
{
template <class ContainerAllocator>
struct localization_perform_measure_
{
  typedef localization_perform_measure_<ContainerAllocator> Type;

  localization_perform_measure_()
    : Odometry()
    , vehicle_state()
    , NavSatFix()  {
    }
  localization_perform_measure_(const ContainerAllocator& _alloc)
    : Odometry(_alloc)
    , vehicle_state(_alloc)
    , NavSatFix(_alloc)  {
  (void)_alloc;
    }



   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _Odometry_type;
  _Odometry_type Odometry;

   typedef  ::team2_package::vehicle_state_<ContainerAllocator>  _vehicle_state_type;
  _vehicle_state_type vehicle_state;

   typedef  ::sensor_msgs::NavSatFix_<ContainerAllocator>  _NavSatFix_type;
  _NavSatFix_type NavSatFix;





  typedef boost::shared_ptr< ::team2_package::localization_perform_measure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::team2_package::localization_perform_measure_<ContainerAllocator> const> ConstPtr;

}; // struct localization_perform_measure_

typedef ::team2_package::localization_perform_measure_<std::allocator<void> > localization_perform_measure;

typedef boost::shared_ptr< ::team2_package::localization_perform_measure > localization_perform_measurePtr;
typedef boost::shared_ptr< ::team2_package::localization_perform_measure const> localization_perform_measureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::team2_package::localization_perform_measure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::team2_package::localization_perform_measure_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::team2_package::localization_perform_measure_<ContainerAllocator1> & lhs, const ::team2_package::localization_perform_measure_<ContainerAllocator2> & rhs)
{
  return lhs.Odometry == rhs.Odometry &&
    lhs.vehicle_state == rhs.vehicle_state &&
    lhs.NavSatFix == rhs.NavSatFix;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::team2_package::localization_perform_measure_<ContainerAllocator1> & lhs, const ::team2_package::localization_perform_measure_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace team2_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::team2_package::localization_perform_measure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::team2_package::localization_perform_measure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::team2_package::localization_perform_measure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::team2_package::localization_perform_measure_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team2_package::localization_perform_measure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team2_package::localization_perform_measure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::team2_package::localization_perform_measure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63820517e6241f49dc999aa8e05f4c4a";
  }

  static const char* value(const ::team2_package::localization_perform_measure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63820517e6241f49ULL;
  static const uint64_t static_value2 = 0xdc999aa8e05f4c4aULL;
};

template<class ContainerAllocator>
struct DataType< ::team2_package::localization_perform_measure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "team2_package/localization_perform_measure";
  }

  static const char* value(const ::team2_package::localization_perform_measure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::team2_package::localization_perform_measure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_msgs/Odometry Odometry\n"
"team2_package/vehicle_state vehicle_state\n"
"sensor_msgs/NavSatFix NavSatFix\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: team2_package/vehicle_state\n"
"float32 x\n"
"float32 y\n"
"float32 yaw\n"
"================================================================================\n"
"MSG: sensor_msgs/NavSatFix\n"
"# Navigation Satellite fix for any Global Navigation Satellite System\n"
"#\n"
"# Specified using the WGS 84 reference ellipsoid\n"
"\n"
"# header.stamp specifies the ROS time for this measurement (the\n"
"#        corresponding satellite time may be reported using the\n"
"#        sensor_msgs/TimeReference message).\n"
"#\n"
"# header.frame_id is the frame of reference reported by the satellite\n"
"#        receiver, usually the location of the antenna.  This is a\n"
"#        Euclidean frame relative to the vehicle, not a reference\n"
"#        ellipsoid.\n"
"Header header\n"
"\n"
"# satellite fix status information\n"
"NavSatStatus status\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south.\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is west.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid\n"
"# (quiet NaN if no altitude is available).\n"
"float64 altitude\n"
"\n"
"# Position covariance [m^2] defined relative to a tangential plane\n"
"# through the reported position. The components are East, North, and\n"
"# Up (ENU), in row-major order.\n"
"#\n"
"# Beware: this coordinate system exhibits singularities at the poles.\n"
"\n"
"float64[9] position_covariance\n"
"\n"
"# If the covariance of the fix is known, fill it in completely. If the\n"
"# GPS receiver provides the variance of each measurement, put them\n"
"# along the diagonal. If only Dilution of Precision is available,\n"
"# estimate an approximate covariance from that.\n"
"\n"
"uint8 COVARIANCE_TYPE_UNKNOWN = 0\n"
"uint8 COVARIANCE_TYPE_APPROXIMATED = 1\n"
"uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\n"
"uint8 COVARIANCE_TYPE_KNOWN = 3\n"
"\n"
"uint8 position_covariance_type\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/NavSatStatus\n"
"# Navigation Satellite fix status for any Global Navigation Satellite System\n"
"\n"
"# Whether to output an augmented fix is determined by both the fix\n"
"# type and the last time differential corrections were received.  A\n"
"# fix is valid when status >= STATUS_FIX.\n"
"\n"
"int8 STATUS_NO_FIX =  -1        # unable to fix position\n"
"int8 STATUS_FIX =      0        # unaugmented fix\n"
"int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\n"
"int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n"
"\n"
"int8 status\n"
"\n"
"# Bits defining which Global Navigation Satellite System signals were\n"
"# used by the receiver.\n"
"\n"
"uint16 SERVICE_GPS =     1\n"
"uint16 SERVICE_GLONASS = 2\n"
"uint16 SERVICE_COMPASS = 4      # includes BeiDou.\n"
"uint16 SERVICE_GALILEO = 8\n"
"\n"
"uint16 service\n"
;
  }

  static const char* value(const ::team2_package::localization_perform_measure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::team2_package::localization_perform_measure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Odometry);
      stream.next(m.vehicle_state);
      stream.next(m.NavSatFix);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct localization_perform_measure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::team2_package::localization_perform_measure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::team2_package::localization_perform_measure_<ContainerAllocator>& v)
  {
    s << indent << "Odometry: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.Odometry);
    s << indent << "vehicle_state: ";
    s << std::endl;
    Printer< ::team2_package::vehicle_state_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_state);
    s << indent << "NavSatFix: ";
    s << std::endl;
    Printer< ::sensor_msgs::NavSatFix_<ContainerAllocator> >::stream(s, indent + "  ", v.NavSatFix);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEAM2_PACKAGE_MESSAGE_LOCALIZATION_PERFORM_MEASURE_H
