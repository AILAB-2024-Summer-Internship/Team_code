# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from team2_package/keyboard_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class keyboard_msg(genpy.Message):
  _md5sum = "bd4b2bffdbfc91ff88466d3ab2a24fe4"
  _type = "team2_package/keyboard_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 fb_speed
float32 yaw
int32 gear
bool brake"""
  __slots__ = ['fb_speed','yaw','gear','brake']
  _slot_types = ['float32','float32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fb_speed,yaw,gear,brake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(keyboard_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fb_speed is None:
        self.fb_speed = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.gear is None:
        self.gear = 0
      if self.brake is None:
        self.brake = False
    else:
      self.fb_speed = 0.
      self.yaw = 0.
      self.gear = 0
      self.brake = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fiB().pack(_x.fb_speed, _x.yaw, _x.gear, _x.brake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.fb_speed, _x.yaw, _x.gear, _x.brake,) = _get_struct_2fiB().unpack(str[start:end])
      self.brake = bool(self.brake)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fiB().pack(_x.fb_speed, _x.yaw, _x.gear, _x.brake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.fb_speed, _x.yaw, _x.gear, _x.brake,) = _get_struct_2fiB().unpack(str[start:end])
      self.brake = bool(self.brake)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fiB = None
def _get_struct_2fiB():
    global _struct_2fiB
    if _struct_2fiB is None:
        _struct_2fiB = struct.Struct("<2fiB")
    return _struct_2fiB
